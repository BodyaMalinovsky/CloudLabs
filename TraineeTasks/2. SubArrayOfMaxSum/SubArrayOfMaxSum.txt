using System;
using System.Linq;
					
public class Program
{
	public static void Main()
	{
		int[] inputArr = {10,-5,1,10,-20,9,1};
		int minElementsInSubArray = 2;
		
		int[] resultSubArray = Test(inputArr, minElementsInSubArray);
		
		foreach(int elem in resultSubArray)
		{
			Console.Write(elem +", ");
		}
	}
	
	static int[] Test(int[] input, int minElementsInSubArray = 2)
	{
		int maxSum = 0;
		int resultStartIndex = 0;
		int resultLastIndex = 0;
		
		for(int skipElem = 0; skipElem <= input.Length - minElementsInSubArray; skipElem++)
		{
			for(int takeElem  = input.Length - skipElem; takeElem >= minElementsInSubArray; takeElem--) 
			{
				
				int tempSum = SumElements(input, skipElem, takeElem);
				if(tempSum > maxSum)
				{
					maxSum = tempSum;
					resultStartIndex = skipElem;
					resultLastIndex = takeElem;
				} 
				//Console.WriteLine("skip={0}, take={1}, all={2}, sum={3}, maxSum={4} in ({5}-{6})", skipElem, takeElem, skipElem+takeElem, tempSum, maxSum, resultStartIndex, resultLastIndex);
			}
			//Console.WriteLine("");
		}
		return input
			.Skip(resultStartIndex)
			.Take(resultLastIndex)
			.ToArray();
	}
	
	static int SumElements(int[] input, int skipElem, int takeElem)
	{
		if( input.Length < skipElem + takeElem)
		{
			throw new ArgumentException("Too few elements in input array!");
		}
		return input
			.Skip(skipElem)
			.Take(takeElem)
			.Aggregate((aggregateValue, next) => aggregateValue + next);
	}
}